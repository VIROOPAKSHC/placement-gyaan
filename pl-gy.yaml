_type: export
__export_format: 4
__export_date: 2023-08-30T11:26:05.264Z
__export_source: insomnia.desktop.app:v2023.5.6
resources:
  - _id: req_c0115e3790834db7bf3e662609feb59a
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693394126375
    created: 1693375116250
    url: "{{ _.base_url }}/user-register"
    name: /register
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
          "username": "username",
          "email": "emailid@example.com",
          "password": "something",
        	"roles":"student",
        	"attributes":"yearOfStudy-3rd Year,department-Metallurgy"
        	
        }
    parameters: []
    headers:
      - name: Content-Type
        disabled: false
        value: application/json
    authentication: {}
    metaSortKey: -1693375116354
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: wrk_5b781d2149a34fe5b27694b23750e5bb
    parentId: null
    modified: 1691666243311
    created: 1691666243311
    name: placement-gyaan
    description: >
      <div>This is a basic web application where user can register, login create
      flash card decks with appropriate details and populate, delete, edit the
      cards in the decks and can check their score, also review and upgrade
      themselves. </div>

      <h3> User Table Schema </h3>  <table>
        <thead>
          <th>Column Name</th>
          <th>Column Type</th>
          <th>Constraints</th>
        </thead>
        <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>email</td>
          <td>String</td>
          <td>Unique, Not Null</td>
        </tr>
        <tr>
          <td>username</td>
          <td>String</td>
          <td>Unique, Not Null</td>
        </tr>      
        <tr>
          <td>password</td>
          <td>String</td>
          <td></td>
        </tr>
        <tr>
          <td>last_reviewed</td>
          <td>Datetime</td>
          <td></td>
        </tr>
      </tbody> </table>

      <h3> Deck Table Schema </h3>  <table>
        <thead>
          <th>Column Name</th>
          <th>Column Type</th>
          <th>Constraints</th>
        </thead>
        <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>name</td>
          <td>String</td>
          <td>Unique, Not Null</td>
        </tr>
        <tr>
          <td>descrption</td>
          <td>String</td>
          <td></td>
        </tr>      

        

        
      </tbody> </table>


      <h3> Card Table Schema </h3>  <table>
        <thead>
          <th>Column Name</th>
          <th>Column Type</th>
          <th>Constraints</th>
        </thead>
        <tbody>
        <tr>
          <td>id</td>
          <td>Integer</td>
          <td>Primary Key, Auto Increment</td>
        </tr>
        <tr>
          <td>front</td>
          <td>String</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>back</td>
          <td>String</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>DeckId</td>
          <td>Integer</td>
          <td>Foreign Key (deck.id), Not Null</td>
      </tbody> </table>

      <h3> UserDeck Table Schema </h3>  <table>
        <thead>
          <th>Column Name</th>
          <th>Column Type</th>
          <th>Constraints</th>
        </thead>
        <tbody>
        <tr>
          <td>user_id</td>
          <td>Integer</td>
          <td>Primary Key, Not Null, Foreign key (user.id)</td>
        </tr>
        <tr>
          <td>deck_id</td>
          <td>Integer</td>
          <td>Primary Key, Not Null, Foreign key (deck.id)</td>
        </tr>
        <tr>
          <td>score</td>
          <td>Decimal</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>last_reviewed</td>
          <td>Datetime</td>
          <td></td>
        </tr>
      </tbody> </table>

      <h3> UserCard Table Schema </h3>  <table>
        <thead>
          <th>Column Name</th>
          <th>Column Type</th>
          <th>Constraints</th>
        </thead>
        <tbody>
        <tr>
          <td>user_id</td>
          <td>Integer</td>
          <td>Primary Key, Not Null, Foreign key (user.id)</td>
        </tr>
        <tr>
          <td>card_id</td>
          <td>Integer</td>
          <td>Primary Key, Not Null, Foreign key (card.id)</td>
        </tr>
        <tr>
          <td>score</td>
          <td>Decimal</td>
          <td>Not Null</td>
        </tr>
        <tr>
          <td>difficulty</td>
          <td>Decimal</td>
          <td></td>
        </tr>
        <tr>
          <td>last_reviewed</td>
          <td>Datetime</td>
          <td></td>
        </tr>
      </tbody> </table>

      <h3> Error Codes </h3>  <!-- Change error codes--> <table>
        <thead>
          <th>Resource</th>
          <th>Error Code</th>
          <th>Message</th>
        </thead>
        <tbody>
        <tr>
          <td>User</td>
          <td>USER001</td>
          <td>User credentials error</td>
        </tr>
        <tr>
          <td>User</td>
          <td>USER002</td>
          <td>User does not exist.</td>
        </tr>
        <tr>
          <td>User</td>
          <td>USER003</td>
          <td>User is not logged in a session.</td>
        </tr>
        <tr>
          <td>Deck</td>
          <td>DECK001</td>
          <td>Deck does not exist.</td>
        </tr>
        <tr>
          <td>Deck</td>
          <td>DECK002</td>
          <td>Deck does not belong to user.</td>
        </tr>
        <tr>
          <td>Deck</td>
          <td>DECK003</td>
          <td>Deck with the given name already exists</td>
        </tr>
        
        <tr>
          <td>Card</td>
          <td>CARD001</td>
          <td>Card does not exist</td>
        </tr>
        <tr>
          <td>Card</td>
          <td>CARD002</td>
          <td>Card does not belong to the deck</td>
        </tr>
        <tr>
          <td>Card</td>
          <td>CARD003</td>
          <td>Card and deck does not belong to the user</td>
        </tr>
        <tr>
          <td>Request</td>
          <td>REQUEST001</td>
          <td>Wrong request body</td>
        </tr>
      </tbody> </table>
    scope: design
    _type: workspace
  - _id: req_4839f97143ee40f0a05e927bc378186c
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693379183849
    created: 1693375116254
    url: "{{ _.base_url }}/question"
    name: /question
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: >-
        {
        	"auth_token":"WyI0ZGIyNWMzYTgyMzE0YmU0YTg3NzkyNGU5ZmJjMmU4MCJd.ZO7pew.Vi_0Di6qBgWx2s09VpDeUYUj67k",
          "question": "What is the minimum length of a Python identifier?",
          "answer": "No fixed length can be specified",
          "choices": "32, 16, 128, No fixed length is specified",
          "type": "technical",
          "correct_choice": "4"
        }
    parameters: []
    headers:
      - name: Content-Type
        disabled: false
        value: application/json
        id: pair_c40e9386a27046ff865537b0c53e06f4
    authentication: {}
    metaSortKey: -1693375116254
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_8ff99773f298493a89c9c3e31350c4ff
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693394559789
    created: 1693375116252
    url: "{{ _.base_url }}/question"
    name: /question
    description: ""
    method: GET
    body:
      mimeType: application/json
      text: >-
        {
          "auth_token": "WyI3Y2ZiMTFiZWU1NjU0YTA5YjJiODI0ZjJlZDhkMDQ1YyJd.ZO8mWg.0P34GkaVYSH-a7L1bqzfY3vBsiY"
        }
    parameters: []
    headers:
      - name: Content-Type
        disabled: false
        value: application/json
    authentication: {}
    metaSortKey: -1693375116252
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_e4d51c6e458d401581e076a1bcd63bde
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693379134499
    created: 1693375116247
    url: "{{ _.base_url }}/user/experience/7"
    name: /user/experience/{exp_id}
    description: ""
    method: DELETE
    body:
      mimeType: application/json
      text: >-
        {
          "auth_token": "WyI0ZGIyNWMzYTgyMzE0YmU0YTg3NzkyNGU5ZmJjMmU4MCJd.ZO7pew.Vi_0Di6qBgWx2s09VpDeUYUj67k"
        }
    parameters: []
    headers:
      - name: Content-Type
        disabled: false
        value: application/json
        id: pair_5b5252726ec1486f87d28400dce9b971
    authentication: {}
    metaSortKey: -1693375116247
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_5e52fe7bcacc40069b96a4c1fbb0f4ff
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693379118183
    created: 1693375116245
    url: "{{ _.base_url }}/user/experience/7"
    name: /user/experience/{exp_id}
    description: ""
    method: PUT
    body:
      mimeType: application/json
      text: >-
        {
        	"auth_token":"WyI0ZGIyNWMzYTgyMzE0YmU0YTg3NzkyNGU5ZmJjMmU4MCJd.ZO7pew.Vi_0Di6qBgWx2s09VpDeUYUj67k",
          "title": "Updated title - Virooo",
          "description": "Updated description - Virooo"
        }
    parameters: []
    headers:
      - name: Content-Type
        disabled: false
        value: application/json
        id: pair_f268a9f50e724c1f9b21bd01580a814b
    authentication: {}
    metaSortKey: -1693375116245
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_ae76876dd53f4399abfd42b30d9843e0
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693394531073
    created: 1693375116242
    url: "{{ _.base_url }}/user/experience"
    name: /user/experience/
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: >-
        {
        	"auth_token":"WyI3Y2ZiMTFiZWU1NjU0YTA5YjJiODI0ZjJlZDhkMDQ1YyJd.ZO8mWg.0P34GkaVYSH-a7L1bqzfY3vBsiY",
          "title": "Learning Experience at IITM BS Placement",
          "description": "I want to describe about this huge. But I think this is fine.",
          "anonymous": 0
        }
    parameters: []
    headers:
      - id: pair_bcb63bf5754d4970875027a3d0d1a1cd
        name: Content-Type
        value: application/json
        description: ""
    authentication: {}
    metaSortKey: -1693375116242
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_0c25dc8ea065451592e5c7fb540e4f85
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693394326834
    created: 1693375116240
    url: "{{ _.base_url }}/user/experience/"
    name: /user/experience/
    description: ""
    method: GET
    body:
      mimeType: application/json
      text: >-
        {
          "auth_token": "WyI3Y2ZiMTFiZWU1NjU0YTA5YjJiODI0ZjJlZDhkMDQ1YyJd.ZO8lig.Wh_QPVDeHnAA-nmmmNxbtgkIDpg"
        }
    parameters: []
    headers:
      - name: Content-Type
        disabled: false
        value: application/json
    authentication: {}
    metaSortKey: -1693375116240
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: req_f84fb9590ce843a4b5f6cf3c8db15678
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693394312313
    created: 1693375116239
    url: "{{ _.base_url }}/login?include_auth_token"
    name: /login?include_auth_token
    description: ""
    method: POST
    body:
      mimeType: application/json
      text: |-
        {
        	"email": "emailid@example.com",
          "password": "something"
        }
    parameters: []
    headers:
      - name: Content-Type
        disabled: false
        value: application/json
    authentication: {}
    metaSortKey: -1693375116239
    isPrivate: false
    settingStoreCookies: true
    settingSendCookies: true
    settingDisableRenderRequestBody: false
    settingEncodeUrl: true
    settingRebuildPath: true
    settingFollowRedirects: global
    _type: request
  - _id: env_d33e0c39486c40ba9f1f2216bf528efb
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693374535667
    created: 1691666243318
    name: Base environment
    data:
      base_url: http://127.0.0.1:5000
    dataPropertyOrder:
      "&":
        - base_url
    color: null
    isPrivate: false
    metaSortKey: 1638097766758
    _type: environment
  - _id: jar_016e5f621db14f35a4589b3b7ec80bcf
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693394522965
    created: 1691666243349
    name: Default Jar
    cookies:
      - key: session
        value: .eJwljktqBDEMBe_idQi2ZP3mMo1kyyQEktA9sxpy9xhm8RYPqqCe5VhnXh_ldj8f-VaOz1luhYmnLmUxkwHeK5pIrcotWRwRw5CmAsnmiEQSplOrtmJZDZdZkRZVqxpO3diWBtfRiEd3YeBGswJZhxHNPKFPBAvViXtRdsjjyvNVI2NFa5FJTN2rBYRCX5BTZ-00Nj2ucx33n6_83ryBNEbx5tZJk6BhSMbsFC27EbKPmAO3t65jjK1ceX-9X_dya2yI2wV4t24Kyn__BI1Q-A.ZO8mWg.M05tM6L5Daz74KOtmjai2C2jAoI
        domain: 127.0.0.1
        path: /
        httpOnly: true
        hostOnly: true
        creation: 2022-03-21T05:36:55.496Z
        lastAccessed: 2023-08-30T11:22:02.964Z
        sameSite: strict
        id: "5586275316780018"
    _type: cookie_jar
  - _id: spc_c942f251c635402d91498b1b2b782bb0
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693391939522
    created: 1691666243366
    fileName: placement-gyaan
    contents: >-
      openapi: 3.0.0

      info:
        title: Placement-Gyaan portal team-16
        contact: {
                name: 'Chekuri Viroopaksh and Vetrivel V',
                url: 'https://www.github.com/VIROOPAKSHC',
                email: '21f1000374@ds.study.iitm.ac.in'
                }
        description: >
          <div>This is an API definition set for an application that enables users to register and use a preparation portal to develop placement skills and share different types of users.
          </div>

          <h3> User Table Schema </h3> 
          <table>
            <thead>
              <th>Column Name</th>
              <th>Column Type</th>
              <th>Constraints</th>
            </thead>
            <tbody>
            <tr>
              <td>id</td>
              <td>Integer</td>
              <td>Primary Key, Auto Increment</td>
            </tr>
            <tr>
              <td>username</td>
              <td>String</td>
              <td>Unique</td>
            </tr>
            <tr>
              <td>email</td>
              <td>String</td>
              <td>Unique, Not Null</td>
            </tr>
            <tr>
              <td>password</td>
              <td>String</td>
              <td></td>
            </tr>
            <tr>
              <td>active</td>
              <td>boolean</td>
              <td></td>
            </tr>
            <tr>
              <td>fs_uniquifier</td>
              <td>string</td>
              <td>Unique</td>
            </tr>
            <tr>
              <td>attributes</td>
              <td>String</td>
              <td>Not Null</td>
            </tr>
          </tbody>
          </table>

          <h3> Role Table Schema </h3> 
          <table>
            <thead>
              <th>Column Name</th>
              <th>Column Type</th>
              <th>Constraints</th>
            </thead>
            <tbody>
            <tr>
              <td>id</td>
              <td>Integer</td>
              <td>Primary Key, Auto Increment</td>
            </tr>
            <tr>
              <td>name</td>
              <td>String</td>
              <td>Unique, Not Null</td>
            </tr>
            <tr>
              <td>descrption</td>
              <td>String</td>
              <td></td>
            </tr>
            <tr>
              <td>permissions</td>
              <td>String</td>
              <td></td>
            </tr>
          </tbody>
          </table>
          <h3> RolesUsers Table Schema </h3> 
          <table>
            <thead>
              <th>Column Name</th>
              <th>Column Type</th>
              <th>Constraints</th>
            </thead>
            <tbody>
            <tr>
              <td>user_id</td>
              <td>Integer</td>
              <td>Primary Key, Foreign Key (user.id)</td>
            </tr>
            <tr>
              <td>role_id</td>
              <td>Integer</td>
              <td>Primary Key, Foreign Key (role.id)</td>
            </tr>
            
          </tbody>
          </table>

          <h3> Question Table Schema </h3> 
          <table>
            <thead>
              <th>Column Name</th>
              <th>Column Type</th>
              <th>Constraints</th>
            </thead>
            <tbody>
            <tr>
              <td>id</td>
              <td>Integer</td>
              <td>Primary Key, Auto Increment</td>
            </tr>
            <tr>
              <td>question</td>
              <td>String</td>
              <td>Unique, Not Null</td>
            </tr>
            <tr>
              <td>answer</td>
              <td>String</td>
              <td>Not Null</td>
            </tr>
            <tr>
              <td>choices</td>
              <td>String</td>
              <td>Not Null</td>
            </tr>
            <tr>
              <td>type</td>
              <td>String</td>
              <td></td>
            </tr>
            <tr>
              <td>auth_id</td>
              <td>Integer</td>
              <td>Foreign Key(user.id)</td>
            </tr>
            <tr>
              <td>timestamp</td>
              <td>DateTime</td>
              <td></td>
            </tr>
            <tr>
              <td>correct_choice</td>
              <td>String</td>
              <td></td>
            </tr>
            
          </tbody>
          </table>

          <h3> Experience Table Schema </h3> 
          <table>
            <thead>
              <th>Column Name</th>
              <th>Column Type</th>
              <th>Constraints</th>
            </thead>
            <tbody>
            <tr>
              <td>id</td>
              <td>Integer</td>
              <td>Primary Key, Auto Increment</td>
            </tr>
            <tr>
              <td>title</td>
              <td>String</td>
              <td>Unique, Not Null</td>
            </tr>
            <tr>
              <td>description</td>
              <td>String</td>
              <td>Not Null</td>
            </tr>
            <tr>
              <td>auth_id</td>
              <td>Integer</td>
              <td>Foreign Key ( user.id ) </td>
            </tr>
            <tr>
              <td>anonymous</td>
              <td>Integer</td>
              <td>Default 0</td>
            </tr>
            <tr>
              <td>timestamp</td>
              <td>DateTime</td>
              <td>Not Null, Default 0</td>
            </tr>
          </tbody>
          </table>

          <h3> Error Codes </h3> 
          <!-- Change error codes-->
          <table>
            <thead>
              <th>Resource</th>
              <th>Error Code</th>
              <th>Message</th>
            </thead>
            <tbody>
            <tr>
              <td>User</td>
              <td>USER001</td>
              <td>User credentials error</td>
            </tr>
            <tr>
              <td>User</td>
              <td>USER002</td>
              <td>User does not exist.</td>
            </tr>
            <tr>
              <td>User</td>
              <td>USER003</td>
              <td>User is not logged in a session.</td>
            </tr>
            <tr>
              <td>Experience</td>
              <td>EXPE001</td>
              <td>Experience does not exist.</td>
            </tr>
            <tr>
              <td>Experience</td>
              <td>EXPE002</td>
              <td>Experience does not belong to user.</td>
            </tr>
            <tr>
              <td>Experience</td>
              <td>EXPE003</td>
              <td>Experience with the given name already exists</td>
            </tr>
            <tr>
              <td>Request</td>
              <td>REQUEST001</td>
              <td>Wrong request body</td>
            </tr>
          </tbody>
          </table>

        version: 1.0.0
      servers:
        - url: http://127.0.0.1:5000
      paths:
        /login?include_auth_token:
          description: End point for user
          post:
            description: Operation to fetch auth token.
            requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        email:
                          type: string
                          example: "emailid@example.com"
                        password:
                          type: string
                          example: "something"
            responses:
              '200':
                description: Request successful
                content:
                  application/json:
                    schema:
                      title: user object
                      type: object
                      properties:
                        csrf_token:
                          type: string
                          example: "nasjfhsdufj9239r3nj"
                        authentication_token:
                          type: string
                          example: "Sbxhi6752BNJS8xdfmn9nB0"
              '404':
                description: Wrong credentials supplied
              '500':
                description: Internal server error
                
              
        /user/experience/:
            description: End point for experiences for a user
            get:
              description: Operation to read user experiences list.
              requestBody:
                    content:
                      application/json:
                        schema:
                          type: object
                          properties:
                            auth_token:
                              type: string
                              example: "B7SJnxgsnm8966snms963bm"
              responses:
                '200':
                  description: Request successful
                  content:
                    application/json:
                      schema:
                        title: experiences list
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 12
                          title:
                            type: string
                            example: "My experience at ___"
                          description:
                            type: string
                            example: "Experience description"
                          timestamp:
                            type: number
                            example: 355679
                '404':
                  description:  USER001
                '500':
                  description: USER002
            post:
              description: Operation to add new experience
              requestBody:
                content:
                      application/json:
                        schema:
                          type: object
                          properties:
                            auth_token:
                              type: string
                              example: "aANk324nknu3dfdj324"
                            title:
                              type: string
                              example: "Something"
                            description:
                              type: string
                              example: "Something else"
                            anonymous:
                              type: integer
                              example: 1
              responses:
                '200':
                  description: Added successfully
                  content:
                    application/json:
                      schema:
                        title: experiences list
                        type: object
                        properties:
                          message:
                            type: string
                            example: Experience created successfully
                '404':
                  description:  USER001, EXPE003
                '500':
                  description: USER002

        /user/experience/{exp_id}:  
            put:
              description: Operation to edit an experience(own)
              requestBody:
                    content:
                      application/json:
                        schema:
                          type: object
                          properties:
                            auth_token:
                              type: string
                              example: "B7SJnxgsnm8966snms963bm"
                            title:
                              type: string
                              example: "Updated title"
                            description:
                              type: string
                              example: "Updated description"
              parameters:
                - in: path
                  name: exp_id
                  required: true
                  schema:
                    type: integer
                    example: 2
              responses:
                '200':
                  description: Request successful
                  content:
                    application/json:
                      schema:
                        type: object
                        properties:
                          message:
                            type: string
                            example: "Successfully uodated"
                          
                '404':
                  description: EXPE001 or USER001
                '500':
                  description: EXPE003
                          
            delete:
              description: Operation to delete experience data.
              parameters:
                - in: path
                  name: exp_id
                  required: true
                  schema:
                    type: integer
                    example: 2
              requestBody:
                    content:
                      application/json:
                        schema:
                          type: object
                          properties:
                            auth_token:
                              type: string
                              example: "B7SJnxgsnm8966snms963bm"
                            exp_id:
                              type: integer
                              example: 12
              responses:
                '200':
                  description: Request successful
                  content:
                    application/json:
                      schema:
                        title: deck object
                        type: object
                        properties:
                          status_code:
                            type: string
                            example: "Successfully deleted"
                '404':
                  description: EXPE001 or USER001
                '500':
                  description: EXPE002

          
      #   /register:

      #     description: End point for user registration

      #     post:

      #       description: Operation to sign up a new user.

      #       requestBody:

      #           content:

      #             application/json:

      #               schema:

      #                 type: object

      #                 properties:

      #                   username:

      #                     type: string

      #                     example: "username"

      #                   email:

      #                     type: string

      #                     example: "emailid@example.com"

      #                   password:

      #                     type: string

      #                     example: "something"

      #       responses:

      #         '200':

      #           description: Request successful

      #           content:

      #             application/json:

      #               schema:

      #                 title: user object

      #                 type: object

      #                 properties:

      #                   auth_token:

      #                     type: string

      #                     example: "Sbxhi6752BNJS8xdfmn9nB0"

      #         '404':

      #           description: Error code USER001 or USER002

      #         '500':

      #           description: Internal server error

        /question:
          get:
            description: Extract all questions.
            
            requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        auth_token:
                          type: string
                          example: "ANSKK34NKNSAOP239sdfijo"
            responses:
              '200':
                description: Request successful
                content:
                  application/json:
                    schema:
                      title: question object
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 3
                        question:
                          type: string
                          example: "What is the maximum length of a Python identifier?"
                        answer:
                          type: string
                          example: "No fixed length is specified"
                        choices:
                          type: string
                          example: "32, 16, 128, No fixed length is specified"
                        type:
                          type: string
                          example: "aptitude"
                        correct_choice:
                          type: string
                          example: "4"
              '404':
                description: Error code USER001 or USER002
              '500':
                description: Internal server error
          post:
            description: Operation to post a new question.
            requestBody:
                content:
                  application/json:
                    schema:
                      type: object
                      properties:
                        auth_token:
                          type: string
                          example: "anksj8hjasfg873SanUJK23RKsj"
                        question:
                          type: string
                          example: "What is the maximum length of a Python identifier?"
                        answer:
                          type: string
                          example: "No fixed length is specified"
                        choices:
                          type: string
                          example: "32, 16, 128, No fixed length is specified"
                        type:
                          type: string
                          example: "aptitude"
                        correct_choice:
                          type: string
                          example: "4"
            responses:
              '200':
                description: Request successful
                content:
                  application/json:
                    schema:
                      title: response object
                      type: object
                      properties:
                        message:
                            type: string
                            example: "Successfully added"
              '404':
                description: Error code USER001 or USER002
              '500':
                description: Internal server error
    contentType: yaml
    _type: api_spec
  - _id: uts_11b17782dfff4203b9805854a774dd65
    parentId: wrk_5b781d2149a34fe5b27694b23750e5bb
    modified: 1693372993357
    created: 1693372993357
    name: New Suite
    _type: unit_test_suite
  - _id: env_cc8aaab512c545d1ae0d529705e47902
    parentId: env_d33e0c39486c40ba9f1f2216bf528efb
    modified: 1691666243322
    created: 1691666243322
    name: OpenAPI env
    data:
      scheme: http
      base_path: ""
      host: 127.0.0.1:5000
    dataPropertyOrder: null
    color: null
    isPrivate: false
    metaSortKey: 1647840705800
    _type: environment
  - _id: env_1de0ac5c5d73462f8bd0a1530fc4d1b3
    parentId: env_d33e0c39486c40ba9f1f2216bf528efb
    modified: 1693374441503
    created: 1693374441503
    name: OpenAPI env 127.0.0.1:5000
    data:
      scheme: http
      base_path: ""
      host: 127.0.0.1:5000
    dataPropertyOrder: null
    color: null
    isPrivate: false
    metaSortKey: 1693374441504
    _type: environment
  - _id: env_1f7585dea65f47f6ae37c519185bdccc
    parentId: env_d33e0c39486c40ba9f1f2216bf528efb
    modified: 1693375116237
    created: 1693375116237
    name: OpenAPI env 127.0.0.1:5000
    data:
      scheme: http
      base_path: ""
      host: 127.0.0.1:5000
    dataPropertyOrder: null
    color: null
    isPrivate: false
    metaSortKey: 1693375116237
    _type: environment
